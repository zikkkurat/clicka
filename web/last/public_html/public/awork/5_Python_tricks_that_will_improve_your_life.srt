1
00:00:00,030 --> 00:00:04,500
for my first job I was technically hired

2
00:00:02,040 --> 00:00:06,059
as a front-end developer but things

3
00:00:04,500 --> 00:00:08,250
weren't that clear-cut on my team and

4
00:00:06,059 --> 00:00:10,980
for my first task I found myself having

5
00:00:08,250 --> 00:00:13,259
to dive into Python code the problem was

6
00:00:10,980 --> 00:00:15,359
I had never formally learned Python and

7
00:00:13,259 --> 00:00:18,690
I found myself having to use it a lot to

8
00:00:15,359 --> 00:00:20,368
do my job no problem I thought learning

9
00:00:18,690 --> 00:00:23,160
on the job is the best way to learn and

10
00:00:20,368 --> 00:00:25,079
I do firmly believe that that being said

11
00:00:23,160 --> 00:00:27,059
I had to struggle to figure out basic

12
00:00:25,079 --> 00:00:29,219
things a few of which would have made my

13
00:00:27,059 --> 00:00:32,009
life so much easier in those early days

14
00:00:29,219 --> 00:00:33,780
of using Python so here's five tips and

15
00:00:32,009 --> 00:00:45,210
tricks you can start using right away to

16
00:00:33,780 --> 00:00:48,870
improve your Python experience the first

17
00:00:45,210 --> 00:00:50,789
trick is the interactive shell let's say

18
00:00:48,869 --> 00:00:54,299
I have a Python file with a function

19
00:00:50,789 --> 00:00:55,829
that adds two numbers now conventionally

20
00:00:54,299 --> 00:00:59,159
I might call this function at the bottom

21
00:00:55,829 --> 00:01:02,399
of my file and then run the file with

22
00:00:59,159 --> 00:01:03,959
the Python keyword but there's another

23
00:01:02,399 --> 00:01:06,450
way I can run this function and that is

24
00:01:03,960 --> 00:01:09,810
with the interactive shell so instead of

25
00:01:06,450 --> 00:01:12,390
Python main dot py I add the - I flag

26
00:01:09,810 --> 00:01:16,618
for interactive now I can call this

27
00:01:12,390 --> 00:01:18,599
function in a shell like this this can

28
00:01:16,618 --> 00:01:21,659
be really useful for developing things

29
00:01:18,599 --> 00:01:24,419
like thoughts if you've seen my tinder

30
00:01:21,659 --> 00:01:27,060
bot video we control our web scraper

31
00:01:24,420 --> 00:01:28,978
through this interface so this will load

32
00:01:27,060 --> 00:01:31,109
your Python file but then instead of

33
00:01:28,978 --> 00:01:32,819
closing after running the code it will

34
00:01:31,109 --> 00:01:36,060
give you access to all the functions and

35
00:01:32,819 --> 00:01:38,339
variables inside so again this is a

36
00:01:36,060 --> 00:01:41,368
great way to do development testing and

37
00:01:38,340 --> 00:01:43,439
it can make you feel like a god when you

38
00:01:41,368 --> 00:01:47,368
have the interactive shell at your

39
00:01:43,438 --> 00:01:50,148
disposal issuing commands at will tip

40
00:01:47,368 --> 00:01:52,859
number two is PDB the Python debugger

41
00:01:50,149 --> 00:01:55,439
while Python - I will run your entire

42
00:01:52,859 --> 00:01:57,930
file then give you an interface into

43
00:01:55,438 --> 00:01:59,548
that environment PDB can stop your file

44
00:01:57,930 --> 00:02:01,920
before it's finished executing so you

45
00:01:59,549 --> 00:02:04,200
can debug I'll give you an example if

46
00:02:01,920 --> 00:02:07,109
I'm adding one and two and then I'm

47
00:02:04,200 --> 00:02:09,449
adding one and some character that

48
00:02:07,109 --> 00:02:12,520
shouldn't be there I will get an error

49
00:02:09,449 --> 00:02:15,049
when I try to run this file

50
00:02:12,520 --> 00:02:16,580
but let's say this file is huge and I

51
00:02:15,050 --> 00:02:19,790
don't know where the error is occurring

52
00:02:16,580 --> 00:02:21,560
in that case I can import PDB the Python

53
00:02:19,789 --> 00:02:24,620
debugger that's built in a Python and

54
00:02:21,560 --> 00:02:28,520
then call the set trace method to pause

55
00:02:24,620 --> 00:02:30,110
the execution of my code now I'll get

56
00:02:28,520 --> 00:02:32,030
this weird kind of interface that says

57
00:02:30,110 --> 00:02:33,980
PDB where I can do different things like

58
00:02:32,030 --> 00:02:36,680
print the current values of variables

59
00:02:33,979 --> 00:02:40,340
and functions or I can go to the next

60
00:02:36,680 --> 00:02:42,230
line with n for next so again this can

61
00:02:40,340 --> 00:02:44,120
help me identify where my code is

62
00:02:42,229 --> 00:02:46,310
breaking and I can even follow the

63
00:02:44,120 --> 00:02:48,680
debugger through complex multiple levels

64
00:02:46,310 --> 00:02:51,050
of function calls the great part is you

65
00:02:48,680 --> 00:02:52,069
can import PDB in lines so you don't

66
00:02:51,050 --> 00:02:53,719
even have to do it at the top of the

67
00:02:52,069 --> 00:02:56,299
file and then you can just delete this

68
00:02:53,719 --> 00:02:58,340
when you're done number 3 the virtual

69
00:02:56,300 --> 00:03:01,250
environment a big part of the reason

70
00:02:58,340 --> 00:03:03,770
Python is so dominant is because of how

71
00:03:01,250 --> 00:03:05,750
many good libraries it has in fact

72
00:03:03,770 --> 00:03:08,600
python has so many good math statistics

73
00:03:05,750 --> 00:03:10,280
data analysis libraries that it will

74
00:03:08,599 --> 00:03:13,159
probably be around for quite a long time

75
00:03:10,280 --> 00:03:15,229
that being said the dependency

76
00:03:13,159 --> 00:03:16,879
management can be a bit annoying in

77
00:03:15,229 --> 00:03:19,009
other words how do you confine the

78
00:03:16,879 --> 00:03:22,460
libraries you need to a specific project

79
00:03:19,009 --> 00:03:24,159
making it shareable and portable one of

80
00:03:22,460 --> 00:03:27,020
the ways we accomplish this is through

81
00:03:24,159 --> 00:03:28,729
virtual environments the most used one

82
00:03:27,020 --> 00:03:32,110
is called virtual end and you can

83
00:03:28,729 --> 00:03:34,369
install it with pip install virtual end

84
00:03:32,110 --> 00:03:36,920
once you do that you can create a new

85
00:03:34,370 --> 00:03:38,750
environment with virtual end followed by

86
00:03:36,919 --> 00:03:40,399
the name of the folder your environments

87
00:03:38,750 --> 00:03:43,580
in and then you can install the

88
00:03:40,400 --> 00:03:45,710
dependencies you need for the project so

89
00:03:43,580 --> 00:03:48,550
you do this by activating the virtual

90
00:03:45,710 --> 00:03:50,990
environment by sourcing the end bin

91
00:03:48,550 --> 00:03:53,780
activate now you'll see this little

92
00:03:50,990 --> 00:03:55,850
prefix in my terminal prompt meaning it

93
00:03:53,780 --> 00:03:58,189
is active now I can install any

94
00:03:55,849 --> 00:04:01,489
dependencies in isolation so let's say I

95
00:03:58,189 --> 00:04:04,219
wanted to develop a a bot I can pip

96
00:04:01,490 --> 00:04:07,640
install selenium the pendency that I

97
00:04:04,219 --> 00:04:10,699
might need and it will just be in this

98
00:04:07,639 --> 00:04:12,979
VN folder anyway I don't want to get too

99
00:04:10,699 --> 00:04:14,539
deep into dependencies but just know

100
00:04:12,979 --> 00:04:16,849
that generally working in a virtual

101
00:04:14,539 --> 00:04:20,569
environment is the best practice when

102
00:04:16,850 --> 00:04:20,989
you're using Python number for list and

103
00:04:20,569 --> 00:04:23,120
dict

104
00:04:20,988 --> 00:04:25,469
comprehension let's say you have some

105
00:04:23,120 --> 00:04:28,740
data a list of fruits with

106
00:04:25,470 --> 00:04:32,160
prices and names represented as a dict

107
00:04:28,740 --> 00:04:33,960
it's a pretty common use case to want to

108
00:04:32,160 --> 00:04:37,080
pull out a single property from an

109
00:04:33,959 --> 00:04:39,120
object but to do that in conventional

110
00:04:37,079 --> 00:04:50,370
syntax we have to do something like this

111
00:04:39,120 --> 00:04:52,829
so it does work but it also takes four

112
00:04:50,370 --> 00:04:55,530
lines and a lot of typing just to get

113
00:04:52,829 --> 00:04:57,120
this done so there is actually a way to

114
00:04:55,529 --> 00:04:59,669
do this with one line and that's with

115
00:04:57,120 --> 00:05:01,920
list comprehension this is kind of weird

116
00:04:59,670 --> 00:05:03,870
syntax that's only occurs in Python but

117
00:05:01,920 --> 00:05:06,030
when you get used to it and if you're

118
00:05:03,870 --> 00:05:08,100
not scared of it kind of like I was then

119
00:05:06,029 --> 00:05:09,779
it can really come in handy so within

120
00:05:08,100 --> 00:05:16,980
these brackets I'll type a loop like

121
00:05:09,779 --> 00:05:19,139
syntax essentially it's giving me each

122
00:05:16,980 --> 00:05:21,990
item in the list in a second variable

123
00:05:19,139 --> 00:05:25,800
over here and with this variable I can

124
00:05:21,990 --> 00:05:28,740
modify the output so this is what will

125
00:05:25,800 --> 00:05:31,560
go into our new list I print this out

126
00:05:28,740 --> 00:05:32,790
we'll get the same result as before now

127
00:05:31,560 --> 00:05:35,879
that's not all we can do with list

128
00:05:32,790 --> 00:05:38,660
comprehension we can also append things

129
00:05:35,879 --> 00:05:41,639
like conditional statements to the end

130
00:05:38,660 --> 00:05:44,430
for example if our fruit starts with an

131
00:05:41,639 --> 00:05:47,370
A then it will filter that list down as

132
00:05:44,430 --> 00:05:49,319
well okay let's talk about dict

133
00:05:47,370 --> 00:05:51,689
comprehension which is kind of similar

134
00:05:49,319 --> 00:05:54,000
to this this time let's create a dict

135
00:05:51,689 --> 00:05:56,370
that has a fruit name as the key and the

136
00:05:54,000 --> 00:05:57,418
price is the value so again normally we

137
00:05:56,370 --> 00:06:00,418
would have to loop through each one of

138
00:05:57,418 --> 00:06:02,069
these manually add them to a dict but in

139
00:06:00,418 --> 00:06:07,370
this case we can just do that in one

140
00:06:02,069 --> 00:06:07,370
line so I would do this with this syntax

141
00:06:15,449 --> 00:06:18,699
and printing that out I can see it

142
00:06:18,160 --> 00:06:21,040
worked

143
00:06:18,699 --> 00:06:24,909
so again this part looks the same it's

144
00:06:21,040 --> 00:06:27,760
just a normal loop but then we set our

145
00:06:24,910 --> 00:06:30,580
key and our value over here with that

146
00:06:27,759 --> 00:06:33,519
second variable that's created from

147
00:06:30,579 --> 00:06:37,180
looking at each item tip number five is

148
00:06:33,519 --> 00:06:40,500
to use the lambda I think the name

149
00:06:37,180 --> 00:06:42,879
sounded mathy but a lambda is just

150
00:06:40,500 --> 00:06:45,220
exactly the same thing as a function

151
00:06:42,879 --> 00:06:49,870
with a different syntax let me show you

152
00:06:45,220 --> 00:06:51,670
what I mean so we have a function for ad

153
00:06:49,870 --> 00:06:57,160
and I'm gonna make another function add

154
00:06:51,670 --> 00:06:59,640
to that has a lambda so it turns out and

155
00:06:57,160 --> 00:07:05,740
if I open this with a interactive shell

156
00:06:59,639 --> 00:07:09,610
these two are exactly the same so what

157
00:07:05,740 --> 00:07:11,650
it is is just a different syntax now

158
00:07:09,610 --> 00:07:14,879
where does this come in handy and why

159
00:07:11,649 --> 00:07:17,379
would you not always use lambda well

160
00:07:14,879 --> 00:07:20,259
this one is quite a bit easier to read

161
00:07:17,379 --> 00:07:22,540
and reason about what you're doing also

162
00:07:20,259 --> 00:07:25,170
if you have multi-line complex functions

163
00:07:22,540 --> 00:07:28,000
you definitely want to put them in a def

164
00:07:25,170 --> 00:07:31,840
now lambdas very good for example if you

165
00:07:28,000 --> 00:07:34,329
wanted to define a function in your

166
00:07:31,839 --> 00:07:38,349
interactive shell that's one case that I

167
00:07:34,329 --> 00:07:41,439
often use them and another probably more

168
00:07:38,350 --> 00:07:44,170
common example is in list methods that

169
00:07:41,439 --> 00:07:47,800
need a callback function for example

170
00:07:44,170 --> 00:07:49,540
sorting mapping and filtering so let's

171
00:07:47,800 --> 00:07:54,220
just use the filter function as an

172
00:07:49,540 --> 00:07:56,200
example which takes as an argument a

173
00:07:54,220 --> 00:08:02,650
function that will be applied to all the

174
00:07:56,199 --> 00:08:05,889
items as well as lists so if I print

175
00:08:02,649 --> 00:08:08,049
that out in list format I'm gonna have

176
00:08:05,889 --> 00:08:11,409
any list of all the numbers greater than

177
00:08:08,050 --> 00:08:14,079
one now this is kind of a lot of code

178
00:08:11,410 --> 00:08:16,840
again for what we're trying to do so one

179
00:08:14,079 --> 00:08:18,490
way to do this would be to use less

180
00:08:16,839 --> 00:08:21,179
comprehension in fact for this example

181
00:08:18,490 --> 00:08:22,939
that would probably be a better way or

182
00:08:21,180 --> 00:08:25,730
well you could again

183
00:08:22,939 --> 00:08:27,290
this the one line using a lambda so I'm

184
00:08:25,730 --> 00:08:29,330
gonna delete that function write a

185
00:08:27,290 --> 00:08:34,038
lambda directly in here as an argument

186
00:08:29,329 --> 00:08:36,288
and then use a pretty clean syntax just

187
00:08:34,038 --> 00:08:38,960
like that now just to make it one line

188
00:08:36,288 --> 00:08:44,240
I'm gonna move it directly in here as

189
00:08:38,960 --> 00:08:46,129
well and we'll get the same result so

190
00:08:44,240 --> 00:08:47,600
again there are a lot of cases where

191
00:08:46,129 --> 00:08:49,850
you'll want to use a function as an

192
00:08:47,600 --> 00:08:50,570
argument and lambdas are great in that

193
00:08:49,850 --> 00:08:53,300
case too

194
00:08:50,570 --> 00:08:54,490
I hope you guys found that useful like

195
00:08:53,299 --> 00:08:57,409
the video if you learned something new

196
00:08:54,490 --> 00:08:59,720
subscribe for more quick tips and tricks

197
00:08:57,409 --> 00:09:02,589
and tutorials and this is code rip I

198
00:08:59,720 --> 00:09:02,590
will catch you guys soon

